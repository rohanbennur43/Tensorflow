# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iEXlc6tDJT_v_cD8NS8oArjWh_TSN6RN
"""

from tensorflow.keras.utils import get_file
import tensorflow
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding,Bidirectional,LSTM,Dense,GRU
from tensorflow.keras.models import Sequential

download_url='https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt'
filepath=get_file('shakespearetext.txt',download_url)
with open(filepath) as f:
  dataset=f.read()

tokenizer=Tokenizer()

tokenizer.fit_on_texts([dataset])
max_id=len(tokenizer.word_index)+1

dataset=dataset.lower().split('\n')

input_sequences=[]
for line in dataset:
  [ingram_sequences]=tokenizer.texts_to_sequences([line])
  for j in range(0,len(ingram_sequences)):
      text=ingram_sequences[:j+1]
      input_sequences.append(text)

max_pad=max([len(x) for x in input_sequences])

input_pad_sequences=pad_sequences(input_sequences,max_pad)

xs=input_pad_sequences[:,:-1]
ys=input_pad_sequences[:,-1:]

y_label=tensorflow.keras.utils.to_categorical(ys,num_classes=max_id)

model=Sequential([Embedding(max_id,64,input_length=max_pad-1),Bidirectional(LSTM(64,return_sequences=True)),Bidirectional(LSTM(64)),Dense(512,activation='relu'),Dense(max_id,activation='softmax')])

'''from tensorflow import keras
K = keras.backend
inputs = keras.layers.Input(shape=[None])
mask = keras.layers.Lambda(lambda inputs: K.not_equal(inputs, 0))(inputs)
z = keras.layers.Embedding(max_id,max_pad)(inputs)
z = keras.layers.GRU(128, return_sequences=True)(z, mask=mask)
z = keras.layers.GRU(128)(z, mask=mask)
outputs = keras.layers.Dense(max_id, activation="softmax")(z)
model = keras.Model(inputs=[inputs], outputs=[outputs])'''

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
model.fit(xs,y_label,epochs=10,verbose=1)

model.summary()

